name: Build and Push Docker Image to Docker Hub

on:
  push:
    branches:
      - main
    paths-ignore:
      - deploymentservice.yml
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: shopping-cart
  DOCKER_IMAGE_TAG_LATEST: latest
  DOCKER_IMAGE_TAG_VERSIONED: ${{ github.run_number }}
  GITHUB_BOT_NAME: github-actions[bot]
  GITHUB_BOT_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
  OWASP_REPORT_DIR: owasp-reports
  OWASP_REPORT_FILE: dependency-check-report.html
  OWASP_REPORT_ZIP: dependency-check-report.zip
  TRIVY_REPORT_DIR: trivy-reports
  TRIVY_REPORT_FILE: trivy-report.html
  TRIVY_REPORT_ZIP: trivy-report.zip

jobs:
  maven-build:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    outputs:
      artifact-name: my-app.jar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'

      - name: Build with Maven
        run: mvn clean package -DskipTests=true

      - name: Archive JAR File
        uses: actions/upload-artifact@v4
        with:
          name: my-app
          path: target/*.jar

  docker-build:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    needs: maven-build
    outputs:
      docker-image-name: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_LATEST }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}

      - name: Download Built JAR
        uses: actions/download-artifact@v4
        with:
          name: my-app
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_LATEST }} -f Dockerfile .

      - name: Save Docker Image
        run: docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_LATEST }} -o ${{ env.DOCKER_IMAGE_NAME }}.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ${{ env.DOCKER_IMAGE_NAME }}.tar

  trivy-scan:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i ${{ env.DOCKER_IMAGE_NAME }}.tar

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget zip -y
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy-archive-keyring.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Scan Docker Image with Trivy and Save HTML Report
        run: |
          mkdir -p ${{ env.TRIVY_REPORT_DIR }}
          wget -O html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
          trivy image --format template --template "@html.tpl" -o ${{ env.TRIVY_REPORT_DIR }}/${{ env.TRIVY_REPORT_FILE }} ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_LATEST }}
          cd ${{ env.TRIVY_REPORT_DIR }}
          zip ${{ env.TRIVY_REPORT_ZIP }} ${{ env.TRIVY_REPORT_FILE }}

      - name: Upload Zipped Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-html
          path: ${{ env.TRIVY_REPORT_DIR }}/${{ env.TRIVY_REPORT_ZIP }}

  owasp-scan:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    needs: maven-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OWASP Dependency-Check
        run: |
          mkdir dependency-check
          curl -L https://github.com/jeremylong/DependencyCheck/releases/latest/download/dependency-check-8.4.0-release.zip -o dc.zip
          unzip dc.zip -d dependency-check
          chmod +x dependency-check/dependency-check/bin/dependency-check.sh

      - name: Run OWASP Dependency-Check
        run: |
          mkdir -p ${{ env.OWASP_REPORT_DIR }}
          ./dependency-check/dependency-check/bin/dependency-check.sh \
            --project "Shopping Cart" \
            --scan . \
            --format HTML \
            --out ${{ env.OWASP_REPORT_DIR }}

      - name: Zip OWASP HTML Report
        run: |
          cd ${{ env.OWASP_REPORT_DIR }}
          zip ${{ env.OWASP_REPORT_ZIP }} ${{ env.OWASP_REPORT_FILE }}

      - name: Upload Zipped OWASP Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report-html
          path: ${{ env.OWASP_REPORT_DIR }}/${{ env.OWASP_REPORT_ZIP }}

  docker-push:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    needs: [docker-build, trivy-scan, owasp-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load -i ${{ env.DOCKER_IMAGE_NAME }}.tar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Docker Image
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_LATEST }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_LATEST }}
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_LATEST }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_VERSIONED }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_LATEST }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_VERSIONED }}

      - name: Update deployment YAML with new image tag
        run: |
          sed -i "s|image: .*/${{ env.DOCKER_IMAGE_NAME }}:.*|image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG_VERSIONED }}|" deploymentservice.yml

      - name: Commit and Push Updated YAML
        run: |
          git config user.name "${{ env.GITHUB_BOT_NAME }}"
          git config user.email "${{ env.GITHUB_BOT_EMAIL }}"
          git add deploymentservice.yml
          git commit -m "chore: update Docker image tag in deploymentservice.yml" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${{ secrets.GIT_TOKEN }}@github.com/${{ github.repository }}
          git push origin main
